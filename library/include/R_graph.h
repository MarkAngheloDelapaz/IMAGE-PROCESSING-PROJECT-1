/******************************************************************************
	グラフィックプログラムライブラリー
	
	変更履歴
	Ver x.xx	1994/04/08	バイナリ描画プレーンを変更可能にした（Ｇｒａｐｈ＿ｐａｇｅ）
	Ver x.xx	1999/09/17	640x480対応（BIN_BXの使用を止める）
	Ver x.xx	2002/09/11	SVGA_DRAWの使用禁止、定数GRAPH_DRAW,GRAPH_ERASE,GRAPH_REVERSEの定義変更
							R_pset(),R_circle()の引数の型変更
	Ver x.xx	2003/06/24	R_zoom_memory追加
	Ver 3.40	2003/09/12	R_clsb,R_clsg,R_disp_cross,R_disp_X,R_disp_corner,
							R_disp_corner_area,R_disp_corner_box追加
	Ver 3.40	2003/09/12	R_printf_system_font(), R_printf_system_scale_font(), R_printf_system_small_font()追加
	Ver 3.42	2004/03/25	R_check_VS、R_check_DISPTをR_videoへ移動
	Ver 3.42	2004/04/25	FONT32追加
	Ver 3.43	2004/05/31	Bd8[],Bin_x[],Bin_y[],Jpz_id[],Jpz_name[],jpz[],Jph_id[], ph_name[]の
							extern宣言方法が間違っていたので修正
	Ver 3.44	2004/10/07	R_wait_VS、R_wait_dispt_wait、R_wait_disptをR_videoへ移動
	Ver 3.48	2006/05/31	Bin_x、Bin_yをコメントアウト
	Ver.3.49	2006/10/24	R_bin_fill()を高速化、関数形式変更(戻り値追加)
							jpz[]をポインタに変更	kist
	Ver.3.50	2008/02/08	R_bin_fill()の旧関数への分岐の関数間違い修正
	Ver 3.50	2009/01/29	NULL宣言コメントアウト
	Ver 3.50	2009/03/23	R_box_fill追加、GRAPH_HATCHING処理追加
	Ver 3.50	2009/04/02	DOS & LINUX ソース統合
	Ver 3.50	2009/07/15	内部関数プロトタイプ宣言追加
	Ver 4.01	2013/07/30	R_gray_page_fill関数追加
******************************************************************************/

#ifndef	R_GRAPH_H_
#define	R_GRAPH_H_

#include "R_stdlib.h"
#include "R_font.h"
#include "R_rect.h"

#ifdef __cplusplus
extern "C" {
#endif

#define		FONT_table_max 100
#define		FONT32	32
#define		FONT24	24
#define		FONT16	16
#define		FONT12	12
#define		FONT8	8
#define		FONT6	6
//#define		NULL	0
#define		OK		0
#define		ERROR	(-1)
#define		YES		1
#define		NO		0

#define		DISP_REV	0x0100		/*	表示反転	*/
#define		DISP_H2		0x0001		/*	横倍角		*/
#define		DISP_V2		0x0010		/*	縦倍角		*/
#define		DISP_4		0x0011		/*	４倍角		*/

#define		ATRB_NORMAL			0	//	
#define		ATRB_REVERSE		1	//	反転
#define		ATRB_OVER_LINE		2	//	上線
#define		ATRB_UNDER_LINE		4	//	下線

/*	font file open	*/
#define		Font_err1	1
#define		Font_err2	2
#define		Font_err3	3
#define		Font_err4	4
#define		Font_err5	5


#define NO_WAIT	0
#define WAITING	1



/*	マクロ宣言	*/


#define		low_phyaddr( seg, off ) (( void * )((( long )seg << 4 ) + off))


/*	プロトタイプ宣言	*/


	void R_chrdisp_system_scale_font(int posx, int posy, const char* p);
	void R_chrdisp_system_font(int posx, int posy, const char* p);
	void R_chrdisp_ank(int posx, int posy, char c) ;
	void R_chrdisp_system_small_font(int posx, int posy, const char* p) ;
	void R_chrdisp_ank_small(int posx, int posy, char c) ;
	int R_chrdisp_system_scale_font_center(int line, const char* p);
	int R_chrdisp_system_font_center(int line, const char* p);
	void R_chrdisp_system_scale_font_sync_hs(int posx, int posy, const char* p);
	void R_chrdisp_ank_sync_hs(int posx, int posy, char c) ;
	void R_chrdisp_ank_small_sync_hs(int posx, int posy, char c) ;
	void R_chrdisp_ank_small_width(int posx, int posy, char c);			// 2009/07/15
	void R_chrdisp_ank_small_width_sync_hs(int posx, int posy, char c);	// 2009/07/15

	int R_chrdisp(int posx, int posy, const char* p);
	int R_chrdisp_center(int line, const char* p);
	int R_chrdisp_center_scale(int line, const char* p);
	int R_chrdisp_hfont(int posx, int posy, char c) ;
	int R_chrdisp_zfont(int posx, int posy, unsigned short code) ;
	int R_invdisp(int posx, int posy, const char* p) ;
	int R_invdisp_hfont(int posx, int posy, char c) ;
	int R_invdisp_zfont(int posx, int posy, unsigned short code) ;
	int R_chrdisp_modify(int posx, int posy, const char* p, int mode);
	int R_chrdisp_modify_hfont(int posx, int posy, char c, int mode);
	int R_chrdisp_modify_zfont(int posx, int posy, unsigned short code, int mode);
	int R_chrdisp_modify_scale(int posx, int posy, const char* p, int mode);

	int R_open_font(void) ;
	int R_close_font(void) ;

	void R_zoom_memory(int magnification, int source_page, int distination_page );

	int R_printf(int x, int y, const char* format, ...);
	void R_printf_system_font(int x, int y, const char* format, ...);
	void R_printf_system_scale_font(int x, int y, const char* format, ...);
	void R_printf_system_small_font(int x, int y, const char* format, ...);

int isdpmi(void);
int isvcpi(void);
int used(short intno);
long get_vector_address(short intno);



//change
#define	GRAPH_DRAW		( int )0x10000000		/* 表示		*/
#define	GRAPH_ERASE		( int )0x20000000		/* 消去		*/
#define	GRAPH_REVERSE	( int )0x30000000		/* 反転		*/
#define	GRAPH_HATCHING	( int )0x40000000		/* ﾊｯﾁﾝｸﾞ	*/

#define	SOLID_LINE		0xffffffffL		/* 実線		*/
#define	DOTTED_LINE		0x55555555L		/* 点線		*/
#define	CETER_LINE		0x72727272L		/* 一点鎖線	*/
#define	DASHED_LINE		0xf0f0f0f0L		/* 破線		*/
#define	BLACK_LINE		0x00000000L		/* 黒線		*/

#define	FILL_WHITE		0
#define	FILL_BLACK		1

#define	R_pstate(x,y,p)	( *( ( long * )( Bin_address[p]+(y)*MxSize/8+((x)/32)*4 ) ) & ( 0x01L << (x)%32 ) )
//#define	R_pstate(x,y,p)	( *( ( long * )( Bin_address[p]+(y)*BIN_BX+((x)/32)*4 ) ) & ( 0x01L << (x)%32 ) )  by matsu

#define R_set_draw_mode(mode)	(Draw_mode = mode)
#define R_get_draw_mode()		Draw_mode
//#define	R_wait_dispt()	if(NO_WAIT!=Draw_mode) { while(!(inp(IN1_PORT)&DISPT));	while(inp(IN1_PORT)&DISPT); }
//#define	R_wait_dispt_wait()		 			   { while((!inp(IN1_PORT)&DISPT));	while(inp(IN1_PORT)&DISPT); }
#define	R_get_graph_page()		Graph_page
#define	R_set_graph_page(p)		Graph_page=p

#ifdef GRAPH
	char	Bd8[ 8 ] = { 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80 };
//	long	Bin_x[ 3 ] = { 512L, 256L, 512L };		// 横方向ドット数 2006/05/31 by araki
//	long	Bin_y[ 3 ] = { 480L, 240L, 240L };		// 縦方向ドット数 2006/05/31 by araki
	unsigned short	*Jpz_font;
//	unsigned char	Jpz_id[7],Jpz_name[9];
	char			Jpz_id[7],Jpz_name[9];		// 2009/07/22
	int				Jpz_xsize=16,Jpz_ysize=16,Jpz_Tnum;
	unsigned char	*Jph_font;
//	unsigned char	Jph_id[7],Jph_name[9];
	char			Jph_id[7],Jph_name[9];		// 2009/07/22
	int				Jph_xsize = 8,Jph_ysize=16;
	int				Draw_mode = WAITING;
	int	Disp_line,Disp_column;
	int	Graph_page = 0;
#else
	extern	char Bd8[];
//	extern	long Bin_x[];			// 2006/05/31 by araki
//	extern	long Bin_y[];			// 2006/05/31 by araki
	extern	unsigned short	*Jpz_font;
//	extern	unsigned char	Jpz_id[], Jpz_name[];
	extern	char			Jpz_id[], Jpz_name[];	// 2009/07/22
	extern	int				Jpz_xsize,Jpz_ysize,Jpz_Tnum;
	extern	struct zft*		jpz;	// 2006/12/13
	extern	unsigned char	*Jph_font;
//	extern	unsigned char	Jph_id[], Jph_name[];
	extern	char			Jph_id[], Jph_name[];	// 2009/07/22
	extern	int				Jph_xsize,Jph_ysize;
	extern	int	Draw_mode;
	extern	int	Disp_line,Disp_column;
	extern	int	Graph_page;
#endif

	struct zft { /*	zenkaku font table	*/
		unsigned short	start,end;
		unsigned short	*address;
		};

#ifdef GRAPH
	unsigned short W2_table[256] = 
		  {
			0x0000,	0x0003,	0x000c,	0x000f,	0x0030,	0x0033,	0x003c,	0x003f,
			0x00c0,	0x00c3,	0x00cc,	0x00cf,	0x00f0,	0x00f3,	0x00fc,	0x00ff,
			0x0300,	0x0303,	0x030c,	0x030f,	0x0330,	0x0333,	0x033c,	0x033f,
			0x03c0,	0x03c3,	0x03cc,	0x03cf,	0x03f0,	0x03f3,	0x03fc,	0x03ff,
			0x0c00,	0x0c03,	0x0c0c,	0x0c0f,	0x0c30,	0x0c33,	0x0c3c,	0x0c3f,
			0x0cc0,	0x0cc3,	0x0ccc,	0x0ccf,	0x0cf0,	0x0cf3,	0x0cfc,	0x0cff,
			0x0f00,	0x0f03,	0x0f0c,	0x0f0f,	0x0f30,	0x0f33,	0x0f3c,	0x0f3f,
			0x0fc0,	0x0fc3,	0x0fcc,	0x0fcf,	0x0ff0,	0x0ff3,	0x0ffc,	0x0fff,
			0x3000,	0x3003,	0x300c,	0x300f,	0x3030,	0x3033,	0x303c,	0x303f,
			0x30c0,	0x30c3,	0x30cc,	0x30cf,	0x30f0,	0x30f3,	0x30fc,	0x30ff,
			0x3300,	0x3303,	0x330c,	0x330f,	0x3330,	0x3333,	0x333c,	0x333f,
			0x33c0,	0x33c3,	0x33cc,	0x33cf,	0x33f0,	0x33f3,	0x33fc,	0x33ff,
			0x3c00,	0x3c03,	0x3c0c,	0x3c0f,	0x3c30,	0x3c33,	0x3c3c,	0x3c3f,
			0x3cc0,	0x3cc3,	0x3ccc,	0x3ccf,	0x3cf0,	0x3cf3,	0x3cfc,	0x3cff,
			0x3f00,	0x3f03,	0x3f0c,	0x3f0f,	0x3f30,	0x3f33,	0x3f3c,	0x3f3f,
			0x3fc0,	0x3fc3,	0x3fcc,	0x3fcf,	0x3ff0,	0x3ff3,	0x3ffc,	0x3fff,
			0xc000,	0xc003,	0xc00c,	0xc00f,	0xc030,	0xc033,	0xc03c,	0xc03f,
			0xc0c0,	0xc0c3,	0xc0cc,	0xc0cf,	0xc0f0,	0xc0f3,	0xc0fc,	0xc0ff,
			0xc300,	0xc303,	0xc30c,	0xc30f,	0xc330,	0xc333,	0xc33c,	0xc33f,
			0xc3c0,	0xc3c3,	0xc3cc,	0xc3cf,	0xc3f0,	0xc3f3,	0xc3fc,	0xc3ff,
			0xcc00,	0xcc03,	0xcc0c,	0xcc0f,	0xcc30,	0xcc33,	0xcc3c,	0xcc3f,
			0xccc0,	0xccc3,	0xcccc,	0xcccf,	0xccf0,	0xccf3,	0xccfc,	0xccff,
			0xcf00,	0xcf03,	0xcf0c,	0xcf0f,	0xcf30,	0xcf33,	0xcf3c,	0xcf3f,
			0xcfc0,	0xcfc3,	0xcfcc,	0xcfcf,	0xcff0,	0xcff3,	0xcffc,	0xcfff,
			0xf000,	0xf003,	0xf00c,	0xf00f,	0xf030,	0xf033,	0xf03c,	0xf03f,
			0xf0c0,	0xf0c3,	0xf0cc,	0xf0cf,	0xf0f0,	0xf0f3,	0xf0fc,	0xf0ff,
			0xf300,	0xf303,	0xf30c,	0xf30f,	0xf330,	0xf333,	0xf33c,	0xf33f,
			0xf3c0,	0xf3c3,	0xf3cc,	0xf3cf,	0xf3f0,	0xf3f3,	0xf3fc,	0xf3ff,
			0xfc00,	0xfc03,	0xfc0c,	0xfc0f,	0xfc30,	0xfc33,	0xfc3c,	0xfc3f,
			0xfcc0,	0xfcc3,	0xfccc,	0xfccf,	0xfcf0,	0xfcf3,	0xfcfc,	0xfcff,
			0xff00,	0xff03,	0xff0c,	0xff0f,	0xff30,	0xff33,	0xff3c,	0xff3f,
			0xffc0,	0xffc3,	0xffcc,	0xffcf,	0xfff0,	0xfff3,	0xfffc,	0xffff
		  };
	
	unsigned char Sys_font_table[768] = 
		  {
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,    0x0c, 0x1e, 0x1e, 0x0c, 0x0c, 0x00, 0x0c, 0x00,
			0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00,    0x36, 0x36, 0x7f, 0x36, 0x7f, 0x36, 0x36, 0x00,
			0x0c, 0x3e, 0x03, 0x1e, 0x30, 0x1f, 0x0c, 0x00,    0x00, 0x63, 0x33, 0x18, 0x0c, 0x66, 0x63, 0x00,
			0x1c, 0x36, 0x1c, 0x6e, 0x3b, 0x33, 0x6e, 0x00,    0x06, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x18, 0x0c, 0x06, 0x06, 0x06, 0x0c, 0x18, 0x00,    0x06, 0x0c, 0x18, 0x18, 0x18, 0x0c, 0x06, 0x00,
			0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,    0x00, 0x0c, 0x0c, 0x3f, 0x0c, 0x0c, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x06,    0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x00,    0x60, 0x30, 0x18, 0x0c, 0x06, 0x03, 0x01, 0x00,
			0x3e, 0x63, 0x73, 0x7b, 0x6f, 0x67, 0x3e, 0x00,    0x0c, 0x0e, 0x0c, 0x0c, 0x0c, 0x0c, 0x3f, 0x00,
			0x1e, 0x33, 0x30, 0x1c, 0x06, 0x33, 0x3f, 0x00,    0x1e, 0x33, 0x30, 0x1c, 0x30, 0x33, 0x1e, 0x00,
			0x38, 0x3c, 0x36, 0x33, 0x7f, 0x30, 0x78, 0x00,    0x3f, 0x03, 0x1f, 0x30, 0x30, 0x33, 0x1e, 0x00,
			0x1c, 0x06, 0x03, 0x1f, 0x33, 0x33, 0x1e, 0x00,    0x3f, 0x33, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x00,
			0x1e, 0x33, 0x33, 0x1e, 0x33, 0x33, 0x1e, 0x00,    0x1e, 0x33, 0x33, 0x3e, 0x30, 0x18, 0x0e, 0x00,
			0x00, 0x0c, 0x0c, 0x00, 0x00, 0x0c, 0x0c, 0x00,    0x00, 0x0c, 0x0c, 0x00, 0x00, 0x0c, 0x0c, 0x06,
			0x18, 0x0c, 0x06, 0x03, 0x06, 0x0c, 0x18, 0x00,    0x00, 0x00, 0x3f, 0x00, 0x00, 0x3f, 0x00, 0x00,
			0x06, 0x0c, 0x18, 0x30, 0x18, 0x0c, 0x06, 0x00,    0x1e, 0x33, 0x30, 0x18, 0x0c, 0x00, 0x0c, 0x00,
			0x3e, 0x63, 0x7b, 0x7b, 0x7b, 0x03, 0x1e, 0x00,    0x0c, 0x1e, 0x33, 0x33, 0x3f, 0x33, 0x33, 0x00,
			0x3f, 0x66, 0x66, 0x3e, 0x66, 0x66, 0x3f, 0x00,    0x3c, 0x66, 0x03, 0x03, 0x03, 0x66, 0x3c, 0x00,
			0x1f, 0x36, 0x66, 0x66, 0x66, 0x36, 0x1f, 0x00,    0x7f, 0x46, 0x16, 0x1e, 0x16, 0x46, 0x7f, 0x00,
			0x7f, 0x46, 0x16, 0x1e, 0x16, 0x06, 0x0f, 0x00,    0x3c, 0x66, 0x03, 0x03, 0x73, 0x66, 0x7c, 0x00,
			0x33, 0x33, 0x33, 0x3f, 0x33, 0x33, 0x33, 0x00,    0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x1e, 0x00,
			0x78, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1e, 0x00,    0x67, 0x66, 0x36, 0x1e, 0x36, 0x66, 0x67, 0x00,
			0x0f, 0x06, 0x06, 0x06, 0x46, 0x66, 0x7f, 0x00,    0x63, 0x77, 0x7f, 0x7f, 0x6b, 0x63, 0x63, 0x00,
			0x63, 0x67, 0x6f, 0x7b, 0x73, 0x63, 0x63, 0x00,    0x1c, 0x36, 0x63, 0x63, 0x63, 0x36, 0x1c, 0x00,
			0x3f, 0x66, 0x66, 0x3e, 0x06, 0x06, 0x0f, 0x00,    0x1e, 0x33, 0x33, 0x33, 0x3b, 0x1e, 0x38, 0x00,
			0x3f, 0x66, 0x66, 0x3e, 0x36, 0x66, 0x67, 0x00,    0x1e, 0x33, 0x07, 0x0e, 0x38, 0x33, 0x1e, 0x00,
			0x3f, 0x2d, 0x0c, 0x0c, 0x0c, 0x0c, 0x1e, 0x00,    0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3f, 0x00,
			0x33, 0x33, 0x33, 0x33, 0x33, 0x1e, 0x0c, 0x00,    0x63, 0x63, 0x63, 0x6b, 0x7f, 0x77, 0x63, 0x00,
			0x63, 0x63, 0x36, 0x1c, 0x1c, 0x36, 0x63, 0x00,    0x33, 0x33, 0x33, 0x1e, 0x0c, 0x0c, 0x1e, 0x00,
			0x7f, 0x63, 0x31, 0x18, 0x4c, 0x66, 0x7f, 0x00,    0x1e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x1e, 0x00,
			0x03, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x40, 0x00,    0x1e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1e, 0x00,
			0x08, 0x1c, 0x36, 0x63, 0x00, 0x00, 0x00, 0x00,    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
			0x0c, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,    0x00, 0x00, 0x1e, 0x30, 0x3e, 0x33, 0x6e, 0x00,
			0x07, 0x06, 0x06, 0x3e, 0x66, 0x66, 0x3b, 0x00,    0x00, 0x00, 0x1e, 0x33, 0x03, 0x33, 0x1e, 0x00,
			0x38, 0x30, 0x30, 0x3e, 0x33, 0x33, 0x6e, 0x00,    0x00, 0x00, 0x1e, 0x33, 0x3f, 0x03, 0x1e, 0x00,
			0x1c, 0x36, 0x06, 0x0f, 0x06, 0x06, 0x0f, 0x00,    0x00, 0x00, 0x6e, 0x33, 0x33, 0x3e, 0x30, 0x1f,
			0x07, 0x06, 0x36, 0x6e, 0x66, 0x66, 0x67, 0x00,    0x0c, 0x00, 0x0e, 0x0c, 0x0c, 0x0c, 0x1e, 0x00,
			0x30, 0x00, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1e,    0x07, 0x06, 0x66, 0x36, 0x1e, 0x36, 0x67, 0x00,
			0x0e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x1e, 0x00,    0x00, 0x00, 0x33, 0x7f, 0x7f, 0x6b, 0x63, 0x00,
			0x00, 0x00, 0x1f, 0x33, 0x33, 0x33, 0x33, 0x00,    0x00, 0x00, 0x1e, 0x33, 0x33, 0x33, 0x1e, 0x00,
			0x00, 0x00, 0x3b, 0x66, 0x66, 0x3e, 0x06, 0x0f,    0x00, 0x00, 0x6e, 0x33, 0x33, 0x3e, 0x30, 0x78,
			0x00, 0x00, 0x3b, 0x6e, 0x66, 0x06, 0x0f, 0x00,    0x00, 0x00, 0x3e, 0x03, 0x1e, 0x30, 0x1f, 0x00,
			0x08, 0x0c, 0x3e, 0x0c, 0x0c, 0x2c, 0x18, 0x00,    0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x6e, 0x00,
			0x00, 0x00, 0x33, 0x33, 0x33, 0x1e, 0x0c, 0x00,    0x00, 0x00, 0x63, 0x6b, 0x7f, 0x7f, 0x36, 0x00,
			0x00, 0x00, 0x63, 0x36, 0x1c, 0x36, 0x63, 0x00,    0x00, 0x00, 0x33, 0x33, 0x33, 0x3e, 0x30, 0x1f,
			0x00, 0x00, 0x3f, 0x19, 0x0c, 0x26, 0x3f, 0x00,    0x38, 0x0c, 0x0c, 0x07, 0x0c, 0x0c, 0x38, 0x00,
			0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,    0x07, 0x0c, 0x0c, 0x38, 0x0c, 0x0c, 0x07, 0x00,
			0x6e, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,    0x00, 0x08, 0x1c, 0x36, 0x63, 0x63, 0x7f, 0x00
		  };
#else
	extern unsigned short W2_table[256];
	extern unsigned char Sys_font_table[768];
#endif


#define R_ps( x, y ) (	*( ( char * )(BIN_ADDRESS+y*MxSize/8+x/8) ) |= Bd8[ (x)&0x07 ]; )
//#define R_ps( x, y ) (	*( ( char * )(BIN_ADDRESS+y*BIN_BX+x/8) ) |= Bd8[ (x)&0x07 ]; )		 by matsu



void	R_line( int x1, int y1, int x2, int y2, int mode, long pat );
int		R_line_h( int x1, int y1, int x2, int y2, int mode, long pat );
int		R_line_v( int x1, int y1, int x2, int y2, int mode, long pat );
void	R_disp_cross( int x, int y, int size, int mode );
void	R_disp_X( int x, int y, int size, int mode );
void	R_disp_corner( int xs, int ys, int xe, int ye, int size, int mode );
void	R_disp_corner_area( R_RECT area, int size, int mode );
void	R_disp_corner_box ( R_BOX  box,  int size, int mode );

/**
*	@brief	四角形の描画
*	@param	int	left		頂点１のｘ座標
*			int	top			頂点１のｙ座標
*			int	right		頂点２のｘ座標
*			int	bottom		頂点２のｙ座標
*			int	mode		描画モード
*				GRAPH_DRAW		白線
*				GRAPH_ERASE		黒線
*				GRAPH_ERASE		反転
*			int	pattern		３２ビット幅の描画パターン
*				SOLID_LINE		実線
*				DOTTED_LINE		点線
*				CETER_LINE		一点鎖線
*				DASHED_LINE		破線
*				BLACK_LINE		黒線
*/
void	R_box(int left, int top, int right, int bottom, int mode, long pattern);

void 	R_box_fill(int x1, int y1, int x2, int y2, int mode);
#define	R_box_rev( x1, y1, x2, y2, pat )	R_box( x1, y1, x2, y2, GRAPH_REVERSE, pat )
void	R_circle(int x, int y, int r, int mode);
void	R_circle_fill( int, int, int, int );
void	R_ellipse( int, int, int, int, double, int );

#ifdef __DOS__
	void	R_bin_cls(short, short, short, short);
#elif __GNUC__
	void	R_bin_cls(int, int, int, int);
#endif

void	R_bin_reverse( int, int, int, int );
#define	R_clsb()	R_bin_cls( 0, 0, FX_SIZE-1, FY_SIZE-1 )
void	R_pset( int, int, int );
int		R_bin_fill( int, int, int, int );							// 関数型  void -> int  2006.10.24
void	R_gray_fill( int x1, int y1, int x2, int y2, int level );
#define	R_clsg()	R_gray_fill( 0, 0, FX_SIZE-1, FY_SIZE-1, 0 )
int		R_dsp_gray_bar(void) ;
int		R_get( short xs, short ys, short xe, short ye, unsigned long *buf ) ;
int		R_put( unsigned long *buf ) ;
void	R_wait_VS(void);
int		R_check_VS(void);
void	R_wait_dispt(void);
void	R_wait_dispt_wait(void);

void	R_gray_page_fill(int page, R_RECT* rect, int level);	// 2013.07.31

// r_dispa.c
int R_open_font_a(void);
int R_chrdisp_hfont_a(int posx, int posy, char c, char atrb);
int R_chrdisp_zfont_a(int posx, int posy, unsigned short code, char atrb);

#ifdef __cplusplus
}
#endif

#endif	// R_GRAPH_H_
